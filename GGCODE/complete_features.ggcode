// Complete GGcode Features Example
// This example demonstrates ALL features of GGcode including special cases

note {
  Complete GGcode Features Example
  Demonstrates: All language features, special cases, and edge cases
  Author: GGcode Examples
  Version: 2.1
}

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)


let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate

// Move to starting position
G0 X[center_x] Y[center_y]

// ===== ARRAY LITERALS =====
let points = [10, 20, 30, 40, 50]
let grid = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
let matrix = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]

// ===== ARRAY ACCESS =====
let first_point = points[0]
let grid_value = grid[1][2]  // Should be 5
let matrix_value = matrix[0][1][0]  // Should be 3

// ===== ALL MATH FUNCTIONS =====
let abs_val = abs(-15)
let mod_val = mod(17, 5)
let floor_val = floor(3.7)
let ceil_val = ceil(3.2)
let round_val = round(3.6)
let min_val = min(5, 10)
let max_val = max(5, 10)
let clamp_val = clamp(15, 0, 10)

let sin_val = sin(45 * DEG_TO_RAD)
let cos_val = cos(30 * DEG_TO_RAD)
let tan_val = tan(60 * DEG_TO_RAD)
let asin_val = asin(0.5)
let acos_val = acos(0.5)
let atan_val = atan(1)
let atan2_val = atan2(1, 1)

let sqrt_val = sqrt(25)
let pow_val = pow(2, 8)
let hypot_val = hypot(3, 4)
let lerp_val = lerp(0, 100, 0.5)
let map_val = map(50, 0, 100, 0, 200)
let distance_val = distance(0, 0, 3, 4)
let sign_val = sign(-5)
let log_val = log(10)
let exp_val = exp(1)
let noise_val = noise(1.5)

let deg_val = deg(PI)
let rad_val = rad(180)

// ===== ALL OPERATORS =====
let a = 10
let b = 5
let c = 10

let eq_test = a == c
let ne_test = a != b
let lt_test = b < a
let le_test = b <= a
let gt_test = a > b
let ge_test = a >= b

let and_test = (a > b) && (c == a)
let or_test = (a < b) || (c != b)
let not_test = !(a < b)
let bit_test = 5 & 3

// ===== FUNCTIONS WITH RETURN =====
function calculate_area(radius) {
    let area = PI * radius * radius
    return area
}

function get_feed_rate(speed) {
    if (speed > 100) {
        return 300
    } else if (speed > 50) {
        return 200
    } else {
        return 100
    }
}

// ===== CONTROL STRUCTURES =====
// For loops with step
for i = 0..<11 step 2 {
    let area = calculate_area(i)
    let feed = get_feed_rate(i)
    G1 X[center_x + i] Y[center_y + area/10] F[feed]
}

// For loops with exclusive range
for j = 0..<10 step 3 {
    G1 X[center_x - j] Y[center_y - j] F[150]
}

// While loops with complex conditions
let k = 0
while (k < 8 && k >= 0) {
    if (mod(k, 2) == 0) {
        G1 X[center_x + k] Y[center_y + 5] F[100]
    } else {
        G1 X[center_x + k] Y[center_y - 5] F[100]
    }
    k = k + 1
}

// Nested control structures
for x = 0..<5 {
    for y = 0..<5 {
        if (x == y) {
            G1 X[center_x + x * 2] Y[center_y + y * 2] F[200]
        } else if (x > y) {
            G1 X[center_x + x * 2] Y[center_y - y * 2] F[150]
        } else {
            G1 X[center_x - x * 2] Y[center_y + y * 2] F[100]
        }
    }
}

// ===== ARRAY ASSIGNMENT =====
let maze = [[1, 2], [3, 4]]
maze[1][0] = 0  // Array index assignment

// ===== IMPLICIT ASSIGNMENT =====
// If you write just an identifier, it becomes an assignment with 0
// Note: This feature is demonstrated in comments to avoid compilation issues
// unexpected_token  // This becomes: unexpected_token = 0

// ===== IMPLICIT G1 =====
// G-code without explicit G1 becomes G1
// Note: This feature is demonstrated in comments to avoid compilation issues
// X[10] Y[20]  // This becomes: G1 X[10] Y[20]

// ===== UNARY OPERATORS =====
let negative = -5
let logical_not = !0
let double_not = !!1

// ===== COMPLEX EXPRESSIONS =====
let d = 2
let e = 3
let f = 4
let complex_expr = (a + b) * (c - d) / (e + f)
let nested_func = sin(cos(tan(45 * DEG_TO_RAD)))

// ===== ALL CONSTANTS =====
let pi_val = PI
let tau_val = TAU
let eu_val = EU
let deg_to_rad_val = DEG_TO_RAD
let rad_to_deg_val = RAD_TO_DEG

// ===== DEMONSTRATE FEATURES WITH G-CODE =====
// Use calculated values in G-code
G1 X[center_x + first_point] Y[center_y + grid_value] F[get_feed_rate(75)]
G1 X[center_x + abs_val] Y[center_y + mod_val] F[get_feed_rate(150)]
G1 X[center_x + sin_val * 10] Y[center_y + cos_val * 10] F[get_feed_rate(200)]

// Use array values
G1 X[center_x + points[2]] Y[center_y + points[4]] F[100]
G1 X[center_x + grid[0][1]] Y[center_y + grid[2][0]] F[150]

// Use mathematical expressions
G1 X[center_x + sqrt_val] Y[center_y + pow_val/100] F[get_feed_rate(50)]
G1 X[center_x + distance_val] Y[center_y + lerp_val/10] F[get_feed_rate(100)]

// Use constants
G1 X[center_x + pi_val * 5] Y[center_y + tau_val * 2] F[get_feed_rate(125)]

// Return to center
G0 X[center_x] Y[center_y] 