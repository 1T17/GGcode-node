name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: |
        npx depcheck --ignores="@types/*,eslint-*"

  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run build
      run: npm run build
      
    - name: Test application startup
      run: |
        timeout 10s npm start || code=$?
        if [[ $code -ne 124 && $code -ne 0 ]]; then
          echo "Application failed to start properly"
          exit 1
        fi
        echo "Application started successfully"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        # Check if all required documentation files exist
        required_docs=("README.md" "CHANGELOG.md" "CONTRIBUTING.md" "docs/ARCHITECTURE.md" "docs/DEPLOYMENT.md")
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "Missing required documentation: $doc"
            exit 1
          fi
        done
        
        echo "All required documentation files present"
        
    - name: Check for broken links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'

  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bundle size check
      run: |
        # Check if bundle sizes are reasonable
        echo "Checking client-side bundle sizes..."
        
        # Count lines in main client files
        main_js_lines=$(wc -l < src/client/js/main.js)
        echo "Main.js lines: $main_js_lines"
        
        if [ "$main_js_lines" -gt 1000 ]; then
          echo "Warning: main.js is getting large ($main_js_lines lines)"
        fi
        
        # Check total client-side code size
        total_client_size=$(find src/client -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
        echo "Total client-side code size: $total_client_size bytes"
        
        if [ "$total_client_size" -gt 500000 ]; then
          echo "Warning: Client-side code is getting large (${total_client_size} bytes)"
        fi