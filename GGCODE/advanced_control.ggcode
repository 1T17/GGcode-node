// Advanced Control Structures Example
// This example demonstrates step, return, note blocks, and complex control flow

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)



let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate

// Note block for documentation
note {
  Advanced Control Structures Example
  Demonstrates: step, return, note blocks
  Author: GGcode Examples
  Version: 1.0
}

// Function with return statement
function calculate_area(radius) {
    let area = PI * radius * radius
    return area
}

// Function with conditional return
function get_feed_rate(speed) {
    if (speed > 100) {
        return 300
    } else if (speed > 50) {
        return 200
    } else {
        return 100
    }
}

// Move to starting position
G0 X[center_x] Y[center_y]

// Test for loop with step
for i = 0..10 step 2 {
    let area = calculate_area(i)
    let feed = get_feed_rate(i)
    G1 X[center_x + i] Y[center_y + area/10] F[feed]
}

// Test for loop with step and exclusive range
for j = 0..<10 step 3 {
    G1 X[center_x - j] Y[center_y - j] F[150]
}

// Test while loop with complex condition
let k = 0
while (k < 8 && k >= 0) {
    if (mod(k, 2) == 0) {
        G1 X[center_x + k] Y[center_y + 5] F[100]
    } else {
        G1 X[center_x + k] Y[center_y - 5] F[100]
    }
    k = k + 1
}

// Test nested control structures
for x = 0..5 {
    for y = 0..5 {
        if (x == y) {
            G1 X[center_x + x * 2] Y[center_y + y * 2] F[200]
        } else if (x > y) {
            G1 X[center_x + x * 2] Y[center_y - y * 2] F[150]
        } else {
            G1 X[center_x - x * 2] Y[center_y + y * 2] F[100]
        }
    }
}

// Return to center
G0 X[center_x] Y[center_y] 