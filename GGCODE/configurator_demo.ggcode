// Configurator Demo Example
// This example demonstrates all configurator annotation types



note {
  Example usage of G-code file variables:
  - `nline` and `decimalpoint` can be set in the header or modified at runtime.
  - Default settings:
      nline = true
      decimalpoint = 3
}

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)




note {
  Configurator Demo Example
  Shows all annotation types: @number, @check, @selection, @text
  Use this to test the configurator functionality
}

// Number inputs with ranges
let radius = 10 /// @number 5 50 // Circle radius in mm
let center_x = 0 /// @number -100 100 // Center X coordinate
let center_y = 0 /// @number -100 100 // Center Y coordinate
let steps = 36 /// @number 12 72 // Number of steps for resolution
let feed_rate = 150 /// @number 50 500 // Feed rate in mm/min

// Checkbox (boolean) inputs
let draw_circle = 1 /// @check // Draw the main circle
let draw_center = 0 /// @check // Draw center point marker
let return_home = 1 /// @check // Return to home position after drawing

// Selection dropdown
let pattern_type = 1 /// @selection 1, 2, 3, 4 // Pattern type: 1=Circle, 2=Square, 3=Triangle, 4=Star


// Move to center
G0 X[center_x] Y[center_y]

// Draw center point if enabled
if (draw_center) {
    G1 X[center_x - 2] Y[center_y] F[feed_rate]
    G1 X[center_x + 2] Y[center_y] F[feed_rate]
    G1 X[center_x] Y[center_y] F[feed_rate]
    G1 X[center_x] Y[center_y - 2] F[feed_rate]
    G1 X[center_x] Y[center_y + 2] F[feed_rate]
    G1 X[center_x] Y[center_y] F[feed_rate]
}

// Draw pattern based on selection
if (pattern_type == 1) {
    // Circle pattern
    if (draw_circle) {
        G0 X[center_x + radius] Y[center_y]
        for i = 0..steps {
            let angle = (i * 360 / steps) * DEG_TO_RAD
            let x = center_x + radius * cos(angle)
            let y = center_y + radius * sin(angle)
            G1 X[x] Y[y] F[feed_rate]
        }
    }
} else if (pattern_type == 2) {
    // Square pattern
    if (draw_circle) {
        let half_size = radius
        G0 X[center_x - half_size] Y[center_y - half_size]
        G1 X[center_x + half_size] Y[center_y - half_size] F[feed_rate]
        G1 X[center_x + half_size] Y[center_y + half_size] F[feed_rate]
        G1 X[center_x - half_size] Y[center_y + half_size] F[feed_rate]
        G1 X[center_x - half_size] Y[center_y - half_size] F[feed_rate]
    }
} else if (pattern_type == 3) {
    // Triangle pattern
    if (draw_circle) {
        let height = radius * 1.732 // sqrt(3)
        G0 X[center_x] Y[center_y - height/2]
        G1 X[center_x - radius] Y[center_y + height/2] F[feed_rate]
        G1 X[center_x + radius] Y[center_y + height/2] F[feed_rate]
        G1 X[center_x] Y[center_y - height/2] F[feed_rate]
    }
} else if (pattern_type == 4) {
    // Star pattern
    if (draw_circle) {
        let outer_radius = radius
        let inner_radius = radius * 0.4
        for i = 0..10 {
            let angle = (i * 36) * DEG_TO_RAD
            let x = center_x + outer_radius * cos(angle)
            let y = center_y + outer_radius * sin(angle)
            if (i == 0) {
                G0 X[x] Y[y]
            } else {
                G1 X[x] Y[y] F[feed_rate]
            }
            
            let inner_angle = (i * 36 + 18) * DEG_TO_RAD
            let inner_x = center_x + inner_radius * cos(inner_angle)
            let inner_y = center_y + inner_radius * sin(inner_angle)
            G1 X[inner_x] Y[inner_y] F[feed_rate]
        }
        G1 X[center_x + outer_radius] Y[center_y] F[feed_rate]
    }
}

// Return to home if enabled
if (return_home) {
    G0 X[0] Y[0]
} 