// Base10 Dice Example
// Creates dice representations for each digit 0-9 using standard pip patterns

note {
  Base10 Dice Example
  Creates dice representations for digits 0-9 using standard pip patterns
  Demonstrates: Digit visualization with pip arrays
  Author: GGcode Examples
  Version: 1.0
}

// ── G-code File Variables ──
let id = 5002
let nline = 1
let decimalpoint = 4


// Configurable parameters
let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate

let safe_z = 1 /// @number 1 5 // Safe retract height
let size = 10 /// @number 5 20 // Die size
let space = 2 /// @number 1 5 // Spacing between dice
let printme = 9876543210001 /// @string // Number to draw

// ── Helpers ──
function draw_square(size) {
    let half = size/2
    G0 Z[safe_z] X[center_x - half] Y[center_y - half]
    G0 Z[0]
    G1 X[center_x + half] Y[center_y - half]
    G1 X[center_x + half] Y[center_y + half]
    G1 X[center_x - half] Y[center_y + half]
    G1 X[center_x - half] Y[center_y - half]
    G0 Z[safe_z]
}

function draw_pip(px, py, radius) {
    let steps = 12
    for i = 0..steps {
        let angle = (i * 360 / steps) * DEG_TO_RAD
        let x = center_x + px + radius * cos(angle)
        let y = center_y + py + radius * sin(angle)
        if i == 0 {
            G0 Z[safe_z] X[x] Y[y]
            G0 Z[0]
        } else {
            G1 X[x] Y[y]
        }
    }
    G0 Z[safe_z]
}







// ── Main Print Function ──
function print(num, size) {
    let str = num
    // Count digits
    let temp = str
    let count = 0
    while temp > 0 {
        temp = floor(temp / 10)
        count = count + 1
    }

    let newcount = count-1
    // Extract digits left → right
    for i = 0..count-1 {

        let divisor = pow(10, newcount)
        let digit = floor(str / divisor)
        digit = digit - floor(digit / 10) * 10   // simulate % 10
        // Offset per digit
        let dx = (count - newcount - 1) * (size + space)
        center_x = dx
        center_y = 0

        note { printing die [digit] }

            
// ── Dice Digits ──



    let half = size/2
    let offset = size/3   // grid spacing
    let r = size/10       // pip radius

    // always draw square border
    draw_square(size)

    // Center pip
    if digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9 {
     draw_pip(0,0,r)
    }

    // Opposite corners for 2,3,4,5,6,7,8,9
    if digit >= 2 {
        draw_pip(-offset, -offset, r)
        draw_pip(offset, offset, r)
    }
    if digit >= 4 {
        draw_pip(-offset, offset, r)
        draw_pip(offset, -offset, r)
    }
    if digit >= 6 {
          draw_pip(-offset,0,r)
          draw_pip(offset,0,r)
    }
    if digit >= 8 {
        draw_pip(0,offset,r)
        draw_pip(0,-offset,r)
    }

            
            
  
        


        newcount = newcount-1
    }
}

// ── Run Example ──
print(printme, size)
// Return to origin
center_x = 0
center_y = 0
G0 X[center_x] Y[center_y] Z[safe_z]
