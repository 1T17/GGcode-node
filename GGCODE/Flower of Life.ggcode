// GGcode test file

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)

note {
  ╔═╗╔═╗┌─┐┌─┐┌┬┐┌─┐     File compiled : [ggcode_file_name]  
  ║ ╦║ ╦│  │ │ ││├┤      Timestamp : [time]  
  ╚═╝╚═╝└─┘└─┘─┴┘└─┘     Program ID: [id]  

  Flower of Life
}

G90 G94 G17
G20
G53 G0 Z0
T1 M6
S[6000] M3
G54
M8

// Settings
let radius      = 5 /// @number 0 100
let z_safe      = 1 /// @number 0 100
let z_cut       = -1 /// @number 0 100
let feed        = 300 /// @number 0 100
let step_deg    = 3 /// @number 0 100
let round_eps   = 0.0001 /// @number 0 100
let outer_rings = 2.5 /// @number 0 100


let spacing_x   = radius
let spacing_y   = radius * sqrt(3) / 2



let outer_r     = radius * outer_rings






G0 Z[z_safe]

// Grid of clipped circles
for row = -5..5 {
    for col = -5..5 {
        ox = col * spacing_x
        oy = row * spacing_y

        // Offset alternate rows
        even = floor(row / 2) * 2
        is_odd = row - even
        ox = ox + is_odd * (spacing_x / 2)

        // Process all circles — clip each point instead
        let drawing = 0
        let was_inside = 0
        let point_count = 0
        let first_x = 0
        let first_y = 0
        let prev_x = 999999
        let prev_y = 999999

        let i = 0
        while (i <= 360) {
            angle = i * DEG_TO_RAD
            raw_x = ox + radius * cos(angle)
            raw_y = oy + radius * sin(angle)
            d2 = raw_x * raw_x + raw_y * raw_y

            // Clip exactly on outer boundary
            if (abs(d2 - outer_r * outer_r) < round_eps) {
                scale = outer_r / sqrt(d2)
                raw_x = raw_x * scale
                raw_y = raw_y * scale
            }

            // Only draw points within final ring
            inside = (raw_x * raw_x + raw_y * raw_y <= outer_r * outer_r + round_eps)

            x = floor(raw_x * 1000 + 0.5) / 1000
            y = floor(raw_y * 1000 + 0.5) / 1000
            if (abs(x) < round_eps) { x = 0 }
            if (abs(y) < round_eps) { y = 0 }

            if (inside && was_inside == 0) {
                // Start of arc segment
                first_x = x
                first_y = y
                if (distance(x, y, prev_x, prev_y) > 0.01) {
                    G0 Z[z_safe]
                    G0 X[x] Y[y]
                    G0 Z[z_cut] F[feed]
                } else {
                    G1 X[x] Y[y] F[feed]
                }
                drawing = 1
                point_count = 1
            } else if (inside && drawing == 1) {
                G1 X[x] Y[y] F[feed]
                point_count = point_count + 1
            } else if (!inside && was_inside == 1 && drawing == 1) {
                // End of arc
                if (point_count > 1 && distance(x, y, first_x, first_y) < 0.5) {
                    G1 X[first_x] Y[first_y] F[feed]
                }
                G0 Z[z_safe]
                drawing = 0
                point_count = 0
            }

            if (inside) {
                prev_x = x
                prev_y = y
            }

            was_inside = inside
            i = i + step_deg
        }

        // Close loop if needed
        if (drawing == 1 && distance(prev_x, prev_y, first_x, first_y) < 0.5) {
            G1 X[first_x] Y[first_y] F[feed]
            G0 Z[z_safe]
        }
    }
}

// Outer Ring
G0 Z[z_safe]
G0 X[outer_r] Y[0]


// Outer Rings
G0 Z[z_safe]

for ring_scale = 1..6 {
    r = outer_r + (ring_scale/10) - 0.3

    G0 X[r] Y[0]
    G0 Z[z_cut] F[feed]

    let i = 0
    while (i <= 360) {
        angle = i * DEG_TO_RAD
        x = r * cos(angle)
        y = r * sin(angle)
        x = floor(x * 1000 + 0.5) / 1000
        y = floor(y * 1000 + 0.5) / 1000
        if (abs(x) < round_eps) { x = 0 }
        if (abs(y) < round_eps) { y = 0 }
        G1 X[x] Y[y] F[feed]
        i = i + step_deg
    }

    G0 X[r] Y[0] F[feed]
    G0 Z[z_safe]
}

