// star Spiral with Arcs Example
// Creates star a proper spiral using G2/G3 arc segments

note {
  True Spiral with Arcs Example
  Creates a proper spiral using G2/G3 arc segments
  Demonstrates: Spiral generation with arc interpolation
  Author: GGcode Examples
  Version: 1.0
}

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)


// Configurable parameters
let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate
let feed_rate = 150 /// @number 50 300 // Feed rate in mm/min
let z_depth = -1 /// @number -5 0 // Z cutting depth
let z_safe = 2 /// @number 1 5 // Safe Z height
let start_radius = 5 /// @number 3 10 // Spiral start radius
let max_radius = 30 /// @number 15 40 // Spiral max radius
let revolutions = 3 /// @number 1 5 // Number of spiral revolutions
let segments_per_rev = 24 /// @number 12 48 // Arc segments per revolution

// Move to safe height and starting position
G0 Z[z_safe]
G0 X[center_x + start_radius] Y[center_y]
G1 Z[z_depth] F[feed_rate]

let total_segments = revolutions * segments_per_rev
let radius_step = (max_radius - start_radius) / total_segments
let angle_step = 360 / segments_per_rev * DEG_TO_RAD

// Draw spiral using G2/G3 arc segments
for i = 0..total_segments {
    let current_radius = start_radius + (i * radius_step)
    let next_radius = start_radius + ((i + 1) * radius_step)
    
    let current_angle = i * angle_step
    let next_angle = (i + 1) * angle_step
    
    // Calculate current and next positions on spiral
    let current_x = center_x + current_radius * cos(current_angle)
    let current_y = center_y + current_radius * sin(current_angle)
    let next_x = center_x + next_radius * cos(next_angle)
    let next_y = center_y + next_radius * sin(next_angle)
    
    // Calculate the center point for this spiral arc segment
    // This creates a spiral arc instead of a circular arc
    let mid_angle = current_angle + angle_step / 2
    let mid_radius = (current_radius + next_radius) / 2
    
    // Calculate arc center that creates a spiral segment
    let arc_center_x = center_x + mid_radius * cos(mid_angle)
    let arc_center_y = center_y + mid_radius * sin(mid_angle)
    
    // Calculate I,J offsets from current position to arc center
    let i_offset = arc_center_x - current_x
    let j_offset = arc_center_y - current_y
    
    // Use G2 for clockwise spiral arc
    G2 X[next_x] Y[next_y] I[i_offset] J[j_offset] F[feed_rate]
}

// Move to safe height and return to center
G0 Z[z_safe]
G0 X[center_x] Y[center_y] // True Spiral with Arcs Example
// Creates a proper spiral using G2/G3 arc segments

note {
  True Spiral with Arcs Example
  Creates a proper spiral using G2/G3 arc segments
  Demonstrates: Spiral generation with arc interpolation
  Author: GGcode Examples
  Version: 1.0
}

let id = 4448

// Configurable parameters
let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate
let feed_rate = 150 /// @number 50 300 // Feed rate in mm/min
let z_depth = -1 /// @number -5 0 // Z cutting depth
let z_safe = 2 /// @number 1 5 // Safe Z height
let start_radius = 5 /// @number 3 10 // Spiral start radius
let max_radius = 30 /// @number 15 40 // Spiral max radius
let revolutions = 3 /// @number 1 5 // Number of spiral revolutions
let segments_per_rev = 24 /// @number 12 48 // Arc segments per revolution

// Move to safe height and starting position
G0 Z[z_safe]
G0 X[center_x + start_radius] Y[center_y]
G1 Z[z_depth] F[feed_rate]

let total_segments = revolutions * segments_per_rev
let radius_step = (max_radius - start_radius) / total_segments
let angle_step = 360 / segments_per_rev * DEG_TO_RAD

// Draw spiral using G2/G3 arc segments
for i = 0..total_segments {
    let current_radius = start_radius + (i * radius_step)
    let next_radius = start_radius + ((i + 1) * radius_step)
    
    let current_angle = i * angle_step
    let next_angle = (i + 1) * angle_step
    
    // Calculate current and next positions on spiral
    let current_x = center_x + current_radius * cos(current_angle)
    let current_y = center_y + current_radius * sin(current_angle)
    let next_x = center_x + next_radius * cos(next_angle)
    let next_y = center_y + next_radius * sin(next_angle)
    
    // Calculate the center point for this spiral arc segment
    // This creates a spiral arc instead of a circular arc
    let mid_angle = current_angle + angle_step / 2
    let mid_radius = (current_radius + next_radius) / 2
    
    // Calculate arc center that creates a spiral segment
    let arc_center_x = center_x + mid_radius * cos(mid_angle)
    let arc_center_y = center_y + mid_radius * sin(mid_angle)
    
    // Calculate I,J offsets from current position to arc center
    let i_offset = arc_center_x - current_x
    let j_offset = arc_center_y - current_y
    
    // Use G2 for clockwise spiral arc
    G2 X[next_x] Y[next_y] I[i_offset] J[j_offset] F[feed_rate]
}

// Move to safe height and return to center
G0 Z[z_safe]
G0 X[center_x] Y[center_y] 