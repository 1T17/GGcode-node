// Simple Gear Generator
// Creates a clean, simple gear with basic tooth profiles

note {
  Simple Gear Generator
  Creates a clean, simple gear with basic tooth profiles
  Demonstrates: Basic gear design with router bit compensation
  Author: GGcode Examples
  Version: 1.0
}

// ── G-code File Variables ──
let id = 4453            // File ID
let nline = 1            // Line numbering: 1 = enabled, 0 = disabled
let decimalpoint = 3     // Number of decimal places (range: 0–6)


// Configurable parameters
let center_x = 0 /// @number -50 50 // Center X coordinate
let center_y = 0 /// @number -50 50 // Center Y coordinate
let teeth_count = 12 /// @number 8 24 // Number of teeth
let outer_radius = 25 /// @number 15 40 // Outer radius (mm)
let inner_radius = 8 /// @number 5 15 // Inner radius (mm)
let tooth_depth = 3 /// @number 1 5 // Tooth depth (mm)
let router_bit = 6.35 /// @selection 3.175 6.35 // Router bit diameter (1/8" or 1/4")
let feed_rate = 150 /// @number 50 300 // Feed rate in mm/min
let z_depth = -1 /// @number -5 0 // Z cutting depth
let z_safe = 2 /// @number 1 5 // Safe Z height

// Calculate gear dimensions
let tool_radius = router_bit / 2
let compensated_outer = outer_radius - tool_radius
let compensated_inner = inner_radius + tool_radius
let tooth_angle = 360 / teeth_count
let tooth_width = tooth_angle * 0.6 // 60% of tooth angle for tooth width

// Move to safe height and center
G0 Z[z_safe]
G0 X[center_x] Y[center_y]

// Cut center hole first
G0 X[center_x + compensated_inner] Y[center_y]
G1 Z[z_depth] F[feed_rate]
G2 X[center_x + compensated_inner] Y[center_y] I[-compensated_inner] J[0] F[feed_rate]

// Move to safe height
G0 Z[z_safe]

// Generate gear teeth
for tooth = 0..teeth_count {
    let tooth_center_angle = tooth * tooth_angle * DEG_TO_RAD
    let tooth_start_angle = (tooth * tooth_angle - tooth_width / 2) * DEG_TO_RAD
    let tooth_end_angle = (tooth * tooth_angle + tooth_width / 2) * DEG_TO_RAD
    
    // Calculate tooth points
    let start_x = center_x + compensated_outer * cos(tooth_start_angle)
    let start_y = center_y + compensated_outer * sin(tooth_start_angle)
    let end_x = center_x + compensated_outer * cos(tooth_end_angle)
    let end_y = center_y + compensated_outer * sin(tooth_end_angle)
    
    // Move to tooth start
    G0 X[start_x] Y[start_y]
    G1 Z[z_depth] F[feed_rate]
    
    // Cut tooth profile (simple trapezoid shape)
    // Cut from outer radius to inner radius
    G1 X[center_x + compensated_inner * cos(tooth_start_angle)] Y[center_y + compensated_inner * sin(tooth_start_angle)] F[feed_rate]
    
    // Cut along inner radius to next tooth
    let next_tooth_start = (tooth + 1) * tooth_angle - tooth_width / 2
    let next_tooth_start_angle = next_tooth_start * DEG_TO_RAD
    let next_start_x = center_x + compensated_inner * cos(next_tooth_start_angle)
    let next_start_y = center_y + compensated_inner * sin(next_tooth_start_angle)
    
    G1 X[next_start_x] Y[next_start_y] F[feed_rate]
    
    // Cut back to outer radius
    G1 X[end_x] Y[end_y] F[feed_rate]
    
    // Move to safe height
    G0 Z[z_safe]
}

// Final cleanup pass around outer diameter
G0 X[center_x + compensated_outer] Y[center_y]
G1 Z[z_depth] F[feed_rate]
G2 X[center_x + compensated_outer] Y[center_y] I[-compensated_outer] J[0] F[feed_rate]

// Move to safe height and return to center
G0 Z[z_safe]
G0 X[center_x] Y[center_y] 